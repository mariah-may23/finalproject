# import the necessary libraries
import copy

import pandas as pd
import time
import plotly.express as px
import plotly.io as pio
from numpy import double

from bubble import bubbleSort
from mergeSort import mergeSort
from counting import count_sort
from radix import radixSort
from quicksort import iterativeQuicksort
from insertion import insertionSort

# store algorithms to be used
SortingAlgo = ['MergeSort', 'QuickSort', 'BubbleSort', 'Insertion Sort', 'RadixSort', 'Counting Sort']

# get user's numbers
# numbers = input("Enter the numbers of the SortingAlgo (ex: 3,6,1)")
# numbers = numbers.split(',')
# numbers = [int(double(x)) for x in numbers]
# numbers_deep = copy.deepcopy(numbers)
columns = ["convicts","year"]
file = pd.read_csv("Caste.csv", usecols=columns)
numbers = file.convicts.tolist()
print(numbers)
numbers_deep = copy.deepcopy(numbers)


# file = file[file['state_name'] == 'Maharashtra']
# file = file.groupby(['year', 'gender',],as_index=False)[[ 'detenues', 'under_trial', 'convicts', 'others']].sum()


# time mergesort takes
start = time.time()
mergeSort(numbers)

end = time.time()
merge = (end - start) * 1000
print("Merge total", merge)

numbers = numbers_deep
print(numbers)
# time bubblesort takes
start = time.time()
bubbleSort(numbers)
end = time.time()
bubble = (end - start)
print("Bubble total", bubble)

numbers = numbers_deep
# time counting sort takes
start = time.time()
count_sort(numbers)
end = time.time()
count = (end - start) * 1000
print("Count total", count)

numbers = numbers_deep
# time radix sort takes
start = time.time()
radixSort(numbers)
end = time.time()
radix = (end - start) * 1000
print("Bucket total", radix)

numbers = numbers_deep
# time quick sort takes
start = time.time()
iterativeQuicksort(numbers)
end = time.time()
quick = (end - start)
print("Quick total", quick)

numbers = numbers_deep
# time insertion sort takes
start = time.time()
insertionSort(numbers)
end = time.time()
insertion = (end - start) * 1000
print("Insertion total", insertion)

# store times
timeTaken = [merge, quick, bubble, insertion, radix, count]
#timeTaken = [100, 200, 300, 500, 600, 700]
pd.options.plotting.backend = "plotly"

# create dataframe
df = pd.DataFrame(dict(Sorting=['MergeSort', 'QuickSort', 'BubbleSort', 'Insertion Sort', 'RadixSort', 'Counting Sort'],
                       TimeComplex=['LINEARITHMIC (nlogn)', 'LINEARITHMIC (nlogn)', 'QUADRATIC (n^2)',
                                    'QUADRATIC (n^2)', 'LINEAR (n)', 'LINEAR (n)'],
                       Time=timeTaken))

# creating the figure
""" 
    'x' and 'y' tell what info to store on the axis
    'labels' allows you to name the axis
    'hover_name' allows to to store a title for the bar when it is hovered over
"""

fig = px.bar(df, x=SortingAlgo, y=timeTaken, color='Sorting', labels={'x': 'Algorithm', 'y': 'Time (ms)'},
             hover_name='TimeComplex', color_discrete_sequence=["lightseagreen", "lightseagreen", "lightskyblue", "lightskyblue", "lemonchiffon", "lemonchiffon"],
             )

fig.show()  # show webpage
